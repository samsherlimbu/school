// ---------------------------------------------
// Prisma Schema for School Management System
// ---------------------------------------------
// Learn more: https://pris.ly/d/prisma-schema
// Accelerate your queries: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// -------------- ENUMS ------------------------
//

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DocumentType {
  RESUME
  CERTIFICATE
  ID_PROOF
  QUALIFICATION
  CONTRACT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE  
}

enum LeaveType {
  SICK
  CASUAL
  VACATION
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum SubjectCategory {
  CORE
  ELECTIVE
  ADDITIONAL
  VOCATIONAL
  LANGUAGE
  EXTRA_CURRICULAR
}

enum SubjectType {
  THEORY
  PRACTICAL
  BOTH
}

//
// -------------- SCHOOL MODELS ----------------
//

model School {
  id        String   @id @default(cuid())
  name      String
  logo      String?
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id         String   @id @default(cuid())
  fullName   String
  email      String   @unique
  phone      String
  school     String   @unique
  country    String
  schoolPage String
  students   Int
  role       String
  media      String
  message    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("contacts")
}

//
// -------------- ACADEMIC STRUCTURE -----------
//

model Class {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  streams   Stream[]
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("classes")
}

model Stream {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  students  Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("streams")
}

model Department {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  hodId        String?
  hodName      String?
  hodStartDate DateTime?
  teachers     Teacher[]
  subjects     Subject[]
  budget       Float?
  budgetYear   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("departments")
}

model Subject {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  code          String
  shortName     String?
  category      SubjectCategory
  type          SubjectType
  passingMarks  Int?
  totaMarks     Int?
  departmentId  String
  departmentName  String
  department    Department? @relation(fields: [departmentId], references: [id])
  isActive      Boolean   @default(true)
  isOptinal     Boolean   @default(false)
  hasTheory     Boolean   @default(true)
  hasPractical  Boolean   @default(false)
  labRequired   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("subjects")
}

//
// -------------- USERS: PARENTS / STUDENTS / TEACHERS ------------
//

model Parent {
  id                        String   @id @default(cuid())
  ParentName                String
  email                     String   @unique
  relationShip              String
  NIN                       String   @unique
  gender                    String
  dob                       DateTime
  state                     String
  occupation                String
  address                   String
  preferenceContactMethod   String
  password                  String
  phone                     String   @unique
  imageUrl                  String?
  country                   String
  students                  Student[]
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("parents")
}

model Student {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  phone         String
  dob           String
  state         String
  studentType   String?  @default("PS")
  rollNo        String   @unique
  regNo         String   @unique
  admissionDate String
  gender        String
  imageUrl      String?
  country       String
  description   String
  parentId      String
  classId       String
  streamId      String
  parentName    String?
  classTitle    String?
  streamTitle   String?
  parent        Parent   @relation(fields: [parentId], references: [id])
  class         Class    @relation(fields: [classId], references: [id])
  stream        Stream   @relation(fields: [streamId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("students")
}

model Teacher {
  id                    String   @id @default(cuid())
  firstName             String
  lastName              String
  email                 String   @unique
  phone                 String  @unique
  dateOfBirth           DateTime?
  gender                Gender
  imageUrl              String?
  password              String?
  isActive              Boolean  @default(true)
  lastLogin             DateTime?
  employeeId            String   @unique
  dateOfJoining         DateTime
  designation           String
  departmentName        String
  departmentId          String?
  department            Department? @relation(fields: [departmentId], references: [id])
  mainSubject           String?
  mainSubjectId         String?
  qualification         String
  subjects              String[]
  classes               String[]
  classIds              String[]
  address               String?
  city                  String?
  state                 String?
  country               String?
  postalCode            String?
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactRelation String?
  experience            Int?
  bio                   String?  @db.Text
  skills                String?
  documents             TeacherDocument[]
  attendance            TeacherAttendance[]
  leaves                TeacherLeave[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("teachers")
}

//
// -------------- TEACHER SUPPORT MODELS ---------
//

model TeacherDocument {
  id         String   @id @default(cuid())
  teacherId  String
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  type       DocumentType
  title      String
  url        String
  uploadedAt DateTime  @default(now())

  @@index([teacherId])
  @@map("teacherDocuments")
}

model TeacherAttendance {
  id        String   @id @default(cuid())
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  date      DateTime
  status    AttendanceStatus
  checkIn   DateTime?
  checkOut  DateTime?
  note      String?

  @@unique([teacherId, date])
  @@map("TeacherAttendancies")
}

model TeacherLeave {
  id         String     @id @default(cuid())
  teacherId  String
  teacher    Teacher    @relation(fields: [teacherId], references: [id])
  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?

  @@index([teacherId])
  @@map("teacherleaves")
}
